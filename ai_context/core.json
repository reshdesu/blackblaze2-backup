{
  "ai_context": {
    "critical_read_first": true,
    "file_purpose": "Essential context for AI assistants working on BlackBlaze B2 Backup Tool",
    "last_updated": "2025-09-11",
    "version": "1.0.98"
  },
  "project": {
    "name": "BlackBlaze B2 Backup Tool",
    "type": "Cross-platform GUI backup application",
    "tech_stack": ["Python", "PySide6", "AWS S3 (BackBlaze B2)", "uv package manager"],
    "current_version": "1.0.98",
    "entry_point": "main.py",
    "core_modules": [
      "src/blackblaze_backup/gui.py",
      "src/blackblaze_backup/core.py",
      "src/blackblaze_backup/config.py",
      "src/blackblaze_backup/utils.py"
    ],
    "key_features": [
      "GUI backup tool for BackBlaze B2 S3 buckets",
      "Incremental backup with deduplication",
      "Scheduled backups with system tray integration",
      "Cross-platform packages (Windows MSI, Ubuntu DEB)",
      "Performance optimization with caching and statistical benchmarks"
    ]
  },
  "ai_assistant_rules": {
    "mandatory_context_usage": "CRITICAL: Always read ALL ai_context files at start of every conversation - core.json (rules), architecture.json (project structure), user_experience.json (user needs), troubleshooting.json (debugging), learning_history.json (learnings)",
    "critical_package_principle": "Packages must work out of the box without requiring system-level changes or modifications to user's system preferences",
    "never_modify_system": [
      "Do not modify user's system preferences",
      "Do not change desktop environment settings",
      "Do not modify system-wide configurations",
      "Do not require manual desktop entry installation",
      "Do not modify user's home directory structure beyond app data",
      "Do not change system-wide icon themes",
      "Do not modify system PATH or environment variables"
    ],
    "proper_package_approach": [
      "Include all necessary files in the package itself",
      "Use application-level configuration only",
      "Set proper window properties and class names",
      "Include desktop entries and icons in package data",
      "Use post-install scripts that only affect app-specific directories",
      "Ensure cross-platform compatibility without system modifications"
    ],
    "never_do_without_asking": [
      "Run expensive tests (5k photo generation takes 20+ minutes)",
      "Commit code changes without user confirmation",
      "Delete any files during cleanup without checking contents",
      "Change version numbers without user request",
      "Modify CI/CD pipeline files without understanding impact"
    ],
    "communication_preferences": [
      "Do not use emotes/emojis in chat responses - user prefers clean text without emotes",
      "Keep responses professional and focused on the technical content",
      "Use clear, concise language without decorative elements"
    ],
    "mandatory_pre_commit_rules": [
      "CRITICAL: Always follow ALL pre-commit rules before making any changes",
      "ruff: Run linter with --fix to catch and fix code issues",
      "ruff-format: Run formatter to ensure consistent code style",
      "trailing-whitespace: Remove trailing whitespace from all lines",
      "end-of-file-fixer: Ensure files end with newline",
      "check-yaml: Validate YAML syntax",
      "check-added-large-files: Prevent large files from being committed",
      "check-merge-conflict: Check for merge conflict markers",
      "check-json: Validate JSON syntax",
      "check-emojis: NO EMOJIS in code files (py, md, txt, yml, yaml)",
      "check-secrets: NO secrets, passwords, API keys, tokens, credentials in code",
      "ALWAYS run 'git add . && git commit' to trigger pre-commit hooks",
      "Fix any pre-commit failures before proceeding"
    ],
    "mandatory_build_check_rules": [
      "CRITICAL: Always check builds for failure within 15 seconds",
      "After any build command, wait maximum 15 seconds and check for failure",
      "If build fails, immediately investigate and fix the issue",
      "Do not proceed with other tasks until build is successful",
      "This applies to all build types: compilation, packaging, testing, etc.",
      "Build check protocol: Run build -> Wait max 15s -> Check exit code -> Fix if failed -> Repeat until success"
    ],
    "comprehensive_fix_approach": [
      "CRITICAL: For EVERY fix, change, or modification, ALWAYS search the ENTIRE codebase",
      "Use grep to search for patterns across ALL modules, not just the obvious ones",
      "Check ALL modules that might be affected by the change (not just the main entry point)",
      "Fix the issue in EVERY module that uses it, not just the first one found",
      "Test thoroughly to ensure no references are missed anywhere",
      "Examples: grep -r 'pattern' src/ --include='*.py' to find ALL usage",
      "This applies to: signals, system calls, imports, function calls, variable names, etc.",
      "This prevents incomplete fixes that cause the same error to persist",
      "UNIVERSAL RULE: Every change must be comprehensive across the entire codebase"
    ],
    "mandatory_release_process": [
      "CRITICAL: Always follow the documented release process from AI_CONTEXT/architecture.json",
      "NEVER create releases without checking the established release process first",
      "The release process is: 1) Update version numbers, 2) Commit changes, 3) Create git tag, 4) Push to trigger CI/CD, 5) Monitor build status, 6) Test released package, 7) Update AI context",
      "Always check AI_CONTEXT/architecture.json for the current release process before proceeding",
      "Do not invent or assume release procedures - use the documented process"
    ],
    "mandatory_rule_expansion": [
      "CRITICAL: Always add new mandatory rules when gaps are identified",
      "If I discover a process, procedure, or pattern that should be mandatory, immediately add it to the mandatory rules",
      "Do not wait for user to ask - proactively identify and add missing mandatory rules",
      "Examples: release processes, build procedures, testing protocols, deployment steps, etc.",
      "The goal is to prevent future instances of not knowing established procedures",
      "When in doubt about whether something should be mandatory, add it as a mandatory rule",
      "Better to have too many mandatory rules than to miss critical procedures"
    ],
    "mandatory_communication_rules": [
      "CRITICAL: NEVER use emojis or emotes in chat responses",
      "User prefers clean, professional text without decorative elements",
      "Keep all responses professional and focused on technical content",
      "Use clear, concise language without visual decorations",
      "This applies to ALL chat responses, not just code files",
      "NO EXCEPTIONS: Never use emojis in any chat communication"
    ],
    "mandatory_ai_context_usage": [
      "CRITICAL: Must read and use ALL ai_context files, not just mandatory rules",
      "core.json: Contains mandatory rules and project info",
      "architecture.json: Contains project structure, dependencies, and release process",
      "user_experience.json: Contains user needs, pain points, and journey",
      "troubleshooting.json: Contains debugging guides and common issues",
      "learning_history.json: Contains conversation learnings and solutions",
      "NEVER ignore any ai_context file - they all contain valuable information",
      "Use information from ALL files to provide comprehensive assistance",
      "The ai_context files work together as a complete knowledge base"
    ],
    "mandatory_ai_context_maintenance": [
      "CRITICAL: Regularly review and reorganize ai_context for optimal learning",
      "After each significant conversation, evaluate if ai_context needs updates",
      "Reorganize information when it becomes cluttered or hard to navigate",
      "Consolidate duplicate information across files",
      "Move information to more appropriate files when structure improves",
      "Add new categories or sections when needed",
      "Remove outdated or irrelevant information",
      "Ensure information is easily findable and logically organized",
      "Proactively suggest ai_context improvements to user",
      "The goal is to maintain a clean, efficient, and useful knowledge base"
    ],
    "icon_management_rules": [
      "CRITICAL: NEVER create new icons or change the existing icon design",
      "The project has specific existing icons that must be preserved",
      "When user requests icon changes, ONLY apply the requested modification (e.g., zoom, resize)",
      "DO NOT create new icon designs, symbols, or visual elements",
      "ALWAYS use the existing icon files: src/blackblaze_backup/icon.png and src/blackblaze_backup/icon.ico",
      "If user requests zoom, resize, or other modifications, apply ONLY to the existing icon content",
      "NEVER replace the icon with a completely new design or symbol",
      "Preserve the original icon design and only apply the specific requested changes"
    ]
  },
  "never_delete_critical_files": {
    "performance_data_highest_priority": [
      "performance_results.json",
      "comprehensive_5k_performance_results.txt",
      "PERFORMANCE_RESULTS.md",
      "DEVELOPMENT_NOTES.md"
    ],
    "performance_data_patterns": [
      "Any files with 'performance', 'benchmark', 'results' in name",
      "Test data directories like test_photos/",
      "Any .json files with test results or data"
    ],
    "project_config": [
      "pyproject.toml",
      "requirements-ci.txt",
      "blackblaze_backup.spec",
      "sample.env",
      "uv.lock",
      ".pre-commit-config.yaml"
    ],
    "source_code_documentation": [
      "src/blackblaze_backup/ directory and all contents",
      "main.py",
      "README.md",
      "LICENSE",
      "CONTRIBUTORS.md",
      "SECURITY.md",
      ".github/workflows/ directory and all workflow files",
      "scripts/ directory and all utility scripts",
      "tests/ directory and all test files"
    ],
    "safe_to_delete_temporary": [
      "__pycache__/ directories",
      ".pytest_cache/",
      "htmlcov/",
      "coverage.xml",
      ".ruff_cache/ directory",
      "dist/ and build/ directories (if they exist)"
    ]
  }
}
