name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write
  security-events: write

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, "3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -e ".[dev]"
        # Remove pytest-qt to avoid GUI dependencies in CI
        uv pip uninstall pytest-qt

    - name: Run linting
      run: |
        source .venv/bin/activate
        ruff check src/ tests/
        ruff format --check src/ tests/

    - name: Run unit tests
      run: |
        source .venv/bin/activate
        pytest tests/test_core.py -v --cov=src/blackblaze_backup --cov-report=xml

    # GUI tests disabled in CI due to headless environment limitations
    # - name: Run GUI tests (Ubuntu only)
    #   if: matrix.python-version == '3.12'
    #   run: |
    #     source .venv/bin/activate
    #     pytest tests/test_gui.py -v --cov=src/blackblaze_backup --cov-append

    # Comprehensive test suite disabled in CI due to headless environment limitations
    # - name: Run comprehensive test suite (Ubuntu only)
    #   if: matrix.python-version == '3.12'
    #   run: |
    #     source .venv/bin/activate
    #     python tests/integration/run_tests.py

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.12'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-windows:
    name: Windows Testing
    runs-on: windows-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv venv
        .venv\Scripts\activate
        uv pip install -e ".[build]"
        uv pip install pillow
        uv pip install psutil

    - name: Convert icon to ICO format
      run: |
        .venv\Scripts\activate
        python -c "from PIL import Image; Image.open('src/blackblaze_backup/icon.png').save('src/blackblaze_backup/icon.ico', format='ICO')"

    - name: Build executable
      run: |
        .venv\Scripts\activate
        pyinstaller --clean --log-level=ERROR blackblaze_backup.spec

    - name: Test Windows Single Instance Protection
      env:
        QT_QPA_PLATFORM: offscreen
        QT_LOGGING_RULES: "*=false"
      run: |
        .venv\Scripts\activate
        python -c "
        import subprocess
        import time
        import os
        import tempfile
        from pathlib import Path

        print('Starting Windows single instance protection test...')

        # Check if lock file exists before starting
        temp_dir = Path(tempfile.gettempdir())
        lock_file = temp_dir / 'blackblaze_backup_tool_single_instance.lock'
        if lock_file.exists():
            print(f'Removing existing lock file: {lock_file}')
            lock_file.unlink(missing_ok=True)

        # Start first instance
        print('Starting first instance...')
        proc1 = subprocess.Popen(['dist/BlackBlaze-Backup-Tool.exe'],
                               stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE)

        # Try to get some output from the first instance
        print('Checking first instance output...')
        try:
            stdout, stderr = proc1.communicate(timeout=2)
            print('First instance stdout:', stdout.decode('utf-8', errors='ignore'))
            print('First instance stderr:', stderr.decode('utf-8', errors='ignore'))
        except subprocess.TimeoutExpired:
            print('First instance is still running (expected)')

        # Wait longer for initialization in CI environment
        print('Waiting for first instance to initialize...')
        time.sleep(5)

        # Check if first instance is still running
        if proc1.poll() is not None:
            print('ERROR: First instance crashed during startup')
            stdout, stderr = proc1.communicate()
            print('STDOUT:', stdout.decode('utf-8', errors='ignore'))
            print('STDERR:', stderr.decode('utf-8', errors='ignore'))
            exit(1)

        # Check if lock file was created
        if not lock_file.exists():
            print('WARNING: Lock file not created by first instance')
            print('First instance PID:', proc1.pid)
            print('Application might not be reaching single instance check')

        # Check if first instance is actually running by process name
        print('Checking for BlackBlaze processes...')
        try:
            result = subprocess.run(['tasklist', '/FI', 'IMAGENAME eq BlackBlaze-Backup-Tool.exe'], capture_output=True, text=True, check=False)
            print('BlackBlaze processes found:', result.stdout)
            if 'BlackBlaze-Backup-Tool.ex' in result.stdout:
                print('SUCCESS: First instance is running')
            else:
                print('ERROR: First instance not found in process list')
                proc1.terminate()
                exit(1)
        except Exception as e:
            print('Error checking processes:', e)

        # Try to start second instance (should fail)
        print('Starting second instance (should fail)...')
        proc2 = subprocess.Popen(['dist/BlackBlaze-Backup-Tool.exe'],
                               stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE)

        # Wait for second instance to either exit or stabilize
        time.sleep(3)

        # Check if second instance is still running
        if proc2.poll() is None:
            print('ERROR: Second instance is still running - single instance protection failed')
            print('First instance PID:', proc1.pid)
            print('Second instance PID:', proc2.pid)
            print('Lock file exists:', lock_file.exists())
            if lock_file.exists():
                with open(lock_file, 'r') as f:
                    lock_pid = f.read().strip()
                    print('Lock file PID:', lock_pid)
            proc2.terminate()
            proc1.terminate()
            exit(1)
        else:
            print('SUCCESS: Second instance exited - single instance protection working')
            print('Second instance exit code:', proc2.returncode)

        # Clean up
        print('Cleaning up...')
        proc1.terminate()
        if lock_file.exists():
            lock_file.unlink(missing_ok=True)
        print('Test completed successfully')
        "

    - name: Test Windows System Tray
      env:
        QT_QPA_PLATFORM: offscreen
        QT_LOGGING_RULES: "*=false"
      run: |
        .venv\Scripts\activate
        python -c "
        import subprocess
        import time

        # Start application
        proc = subprocess.Popen(['dist/BlackBlaze-Backup-Tool.exe'],
                               stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE)
        time.sleep(5)  # Let it initialize and show tray

        # Check if process is still running
        if proc.poll() is None:
            print('SUCCESS: Application started and is running')
            proc.terminate()
        else:
            print('ERROR: Application crashed during startup')
            exit(1)
        "

    - name: Test Windows Window Focus
      env:
        QT_QPA_PLATFORM: offscreen
        QT_LOGGING_RULES: "*=false"
      run: |
        .venv\Scripts\activate
        python -c "
        import subprocess
        import time
        import ctypes
        from ctypes import wintypes

        # Start application
        proc = subprocess.Popen(['dist/BlackBlaze-Backup-Tool.exe'],
                               stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE)
        time.sleep(3)

        # Try to find and focus the window
        user32 = ctypes.windll.user32

        # Find window by class name or title
        hwnd = user32.FindWindowW(None, 'BlackBlaze B2 Backup Tool')
        if hwnd:
            print('SUCCESS: Found application window')
            # Try to bring to front
            user32.SetForegroundWindow(hwnd)
            print('SUCCESS: Window focus test completed')
        else:
            print('WARNING: Could not find application window')

        proc.terminate()
        "

    - name: Test Windows Performance
      env:
        QT_QPA_PLATFORM: offscreen
        QT_LOGGING_RULES: "*=false"
      run: |
        .venv\Scripts\activate
        python -c "
        import subprocess
        import time
        import psutil
        import os

        print('Starting Windows performance testing...')

        # Start application
        proc = subprocess.Popen(['dist/BlackBlaze-Backup-Tool.exe'],
                               stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE)

        # Wait for startup
        time.sleep(5)

        if proc.poll() is None:
            # Get process info
            process = psutil.Process(proc.pid)

            # Measure memory usage
            memory_info = process.memory_info()
            memory_mb = memory_info.rss / 1024 / 1024

            # Measure CPU usage over 10 seconds
            cpu_percent = process.cpu_percent(interval=10)

            print(f'Memory usage: {memory_mb:.2f} MB')
            print(f'CPU usage: {cpu_percent:.2f}%')

            # Check if memory usage is reasonable (< 200MB)
            if memory_mb < 200:
                print('SUCCESS: Memory usage is within acceptable limits')
            else:
                print('WARNING: Memory usage is high')

            # Check if CPU usage is reasonable (< 50%)
            if cpu_percent < 50:
                print('SUCCESS: CPU usage is within acceptable limits')
            else:
                print('WARNING: CPU usage is high')

            proc.terminate()
        else:
            print('ERROR: Application crashed during performance test')
        "

    - name: Collect Windows Test Results
      if: always()
      run: |
        echo "Windows testing completed"
        echo "Test results will be available in the workflow logs"

  build-packages:
    name: Build Packages
    runs-on: ${{ matrix.os }}
    needs: [test, test-windows]
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -e ".[build]"

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        uv venv
        .venv\Scripts\activate
        uv pip install -e ".[build]"
        uv pip install pillow

    - name: Convert icon to ICO format (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        .venv\Scripts\activate
        python -c "from PIL import Image; Image.open('src/blackblaze_backup/icon.png').save('src/blackblaze_backup/icon.ico', format='ICO')"

    - name: Build executable (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        source .venv/bin/activate
        pyinstaller --clean --log-level=ERROR blackblaze_backup.spec

    - name: Build executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        .venv\Scripts\activate
        pyinstaller --clean --log-level=ERROR blackblaze_backup.spec

    - name: Build DEB package (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        source .venv/bin/activate

        # Extract version from git tag (remove 'v' prefix for DEB version)
        VERSION=${GITHUB_REF_NAME#v}
        # Ensure proper Debian version format (epoch:version-revision)
        DEB_VERSION="1:${VERSION}-1"
        echo "Building DEB package version: $DEB_VERSION"

        mkdir -p package/usr/bin
        mkdir -p package/usr/share/applications
        mkdir -p package/usr/share/icons
        mkdir -p package/usr/share/doc/blackblaze-backup-tool
        mkdir -p package/DEBIAN

        # Copy executable
        cp dist/BlackBlaze-Backup-Tool package/usr/bin/blackblaze-backup-tool
        chmod +x package/usr/bin/blackblaze-backup-tool

        # Create desktop file
        cat > package/usr/share/applications/blackblaze-backup-tool.desktop << EOF
        [Desktop Entry]
        Name=BlackBlaze B2 Backup Tool
        Comment=Cross-platform backup tool for BackBlaze B2
        Exec=blackblaze-backup-tool
        Icon=blackblaze-backup-tool
        Terminal=false
        Type=Application
        Categories=Utility;System;
        EOF

        # Copy icon
        cp src/blackblaze_backup/icon.png package/usr/share/icons/blackblaze-backup-tool.png

        # Create control file
        cat > package/DEBIAN/control << EOF
        Package: blackblaze-backup-tool
        Version: $DEB_VERSION
        Section: utils
        Priority: optional
        Architecture: amd64
        Depends: libc6 (>= 2.17), libgcc-s1 (>= 3.0)
        Maintainer: BlackBlaze B2 Backup Tool Contributors <noreply@example.com>
        Description: Cross-platform backup tool for BackBlaze B2
         A modern GUI application for backing up local folders to BackBlaze B2 S3 buckets
         with automatic scheduling and background operation.
        EOF

        # Build DEB package with version at the end
        dpkg-deb --build package blackblaze-backup-tool_amd64_${GITHUB_REF_NAME}.deb

    - name: Build MSI package (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Install WiX Toolset via Chocolatey
        choco install wixtoolset -y
        refreshenv

        # Extract version from git tag (remove 'v' prefix for WiX version)
        $version = "${{ github.ref_name }}".Substring(1)  # Remove 'v' prefix
        $wixVersion = "$version.0"  # WiX requires 4-part version (major.minor.patch.build)
        echo "Building MSI package version: $wixVersion"

        # Create WiX configuration
        mkdir installer
        $productId = [System.Guid]::NewGuid().ToString().ToUpper()
        # Use consistent UpgradeCode for all versions to enable proper upgrades
        $upgradeId = "12345678-1234-1234-1234-123456789012"

        $wixContent = @"
        <?xml version="1.0" encoding="UTF-8"?>
        <Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
          <Product Id="$productId"
                   Name="BlackBlaze B2 Backup Tool"
                   Language="1033"
                   Version="$wixVersion"
                   Manufacturer="BlackBlaze B2 Backup Tool Contributors"
                   UpgradeCode="$upgradeId">

            <Package InstallerVersion="200"
                     Compressed="yes"
                     InstallScope="perMachine"
                     Description="Cross-platform backup tool for BackBlaze B2" />

            <MediaTemplate EmbedCab="yes" />

            <!-- Suppress the "close application" dialog -->
            <Property Id="MSIRESTARTMANAGERCONTROL" Value="Disable" />
            <Property Id="MSIDISABLERMRESTART" Value="1" />

            <MajorUpgrade DowngradeErrorMessage="A newer version of [ProductName] is already installed."
                          AllowSameVersionUpgrades="yes"
                          Schedule="afterInstallValidate" />

            <Feature Id="ProductFeature" Title="BlackBlaze B2 Backup Tool" Level="1">
              <ComponentGroupRef Id="ProductComponents" />
              <ComponentGroupRef Id="StartMenuComponents" />
              <ComponentGroupRef Id="DesktopComponents" />
            </Feature>

            <Directory Id="TARGETDIR" Name="SourceDir">
              <Directory Id="ProgramFilesFolder">
                <Directory Id="INSTALLFOLDER" Name="BlackBlazeBackupTool" />
              </Directory>
              <Directory Id="ProgramMenuFolder">
                <Directory Id="ProgramMenuDir" Name="BlackBlaze B2 Backup Tool" />
              </Directory>
              <Directory Id="DesktopFolder" Name="Desktop" />
            </Directory>

            <Icon Id="ApplicationIcon" SourceFile="../src/blackblaze_backup/icon.ico" />

            <ComponentGroup Id="ProductComponents" Directory="INSTALLFOLDER">
              <Component Id="MainExecutable" Guid="12345678-1234-1234-1234-123456789012">
                <File Id="BlackBlazeBackupToolExe"
                      Name="BlackBlaze-Backup-Tool.exe"
                      Source="../dist/BlackBlaze-Backup-Tool.exe"
                      KeyPath="yes" />
              </Component>
            </ComponentGroup>

            <ComponentGroup Id="StartMenuComponents" Directory="ProgramMenuDir">
              <Component Id="StartMenuShortcut" Guid="87654321-4321-4321-4321-210987654321">
                <Shortcut Id="StartMenuShortcut"
                          Directory="ProgramMenuDir"
                          Name="BlackBlaze B2 Backup Tool"
                          Target="[INSTALLFOLDER]BlackBlaze-Backup-Tool.exe"
                          WorkingDirectory="INSTALLFOLDER"
                          Icon="ApplicationIcon"
                          IconIndex="0" />
                <RemoveFolder Id="ProgramMenuDir" On="uninstall" />
                <RegistryValue Root="HKCU" Key="Software\BlackBlazeBackupTool" Name="installed" Type="integer" Value="1" KeyPath="yes" />
              </Component>
            </ComponentGroup>

            <ComponentGroup Id="DesktopComponents" Directory="DesktopFolder">
              <Component Id="DesktopShortcut" Guid="11111111-2222-3333-4444-555555555555">
                <Shortcut Id="DesktopShortcut"
                          Directory="DesktopFolder"
                          Name="BlackBlaze B2 Backup Tool"
                          Target="[INSTALLFOLDER]BlackBlaze-Backup-Tool.exe"
                          WorkingDirectory="INSTALLFOLDER"
                          Icon="ApplicationIcon"
                          IconIndex="0" />
                <RegistryValue Root="HKCU" Key="Software\BlackBlazeBackupTool" Name="desktop" Type="integer" Value="1" KeyPath="yes" />
              </Component>
            </ComponentGroup>

            <!-- Custom action to gracefully close application (immediate) -->
            <CustomAction Id="CloseAppImmediate"
                          Directory="TARGETDIR"
                          ExeCommand="taskkill /F /IM BlackBlaze-Backup-Tool.exe"
                          Execute="immediate"
                          Return="ignore" />

            <!-- Custom action to gracefully close application (deferred) -->
            <CustomAction Id="CloseAppGracefully"
                          Directory="INSTALLFOLDER"
                          ExeCommand="taskkill /F /IM BlackBlaze-Backup-Tool.exe"
                          Execute="deferred"
                          Return="ignore" />

            <InstallExecuteSequence>
              <Custom Action="CloseAppImmediate" After="CostFinalize">1</Custom>
              <Custom Action="CloseAppGracefully" Before="InstallFiles">1</Custom>
            </InstallExecuteSequence>

            <InstallUISequence>
              <Custom Action="CloseAppImmediate" After="CostFinalize">1</Custom>
            </InstallUISequence>

          </Product>
        </Wix>
        "@

        $wixContent | Out-File -FilePath "installer/product.wxs" -Encoding UTF8

        # Build MSI installer with version at the end
        cd installer
        candle.exe product.wxs -o product.wixobj
        light.exe product.wixobj -o BlackBlaze-Backup-Tool-${{ github.ref_name }}.msi
      shell: powershell

    - name: Upload DEB artifact
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: blackblaze-backup-ubuntu-deb
        path: blackblaze-backup-tool_amd64_${{ github.ref_name }}.deb

    - name: Upload MSI artifact
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: blackblaze-backup-windows-msi
        path: installer/BlackBlaze-Backup-Tool-${{ github.ref_name }}.msi

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -e ".[dev]"

    - name: Run security scan
      run: |
        source .venv/bin/activate
        pip install safety bandit
        safety check
        bandit -r src/ -f json -o bandit-report.json --severity-level medium

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: bandit-report.json

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build-packages, security]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Ubuntu DEB package
      uses: actions/download-artifact@v4
      with:
        name: blackblaze-backup-ubuntu-deb
        path: ./releases/ubuntu-deb

    - name: Download Windows MSI package
      uses: actions/download-artifact@v4
      with:
        name: blackblaze-backup-windows-msi
        path: ./releases/windows-msi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        files: |
          releases/ubuntu-deb/*.deb
          releases/windows-msi/*.msi
        body: |
          ## BlackBlaze B2 Backup Tool ${{ github.ref_name }}

          ### Downloads
          - **Windows MSI Installer**: `BlackBlaze-Backup-Tool-${{ github.ref_name }}.msi` (Recommended for Windows)
          - **Ubuntu DEB Package**: `blackblaze-backup-tool_amd64_${{ github.ref_name }}.deb` (Recommended for Ubuntu)

          ### Installation
          1. Download the appropriate package for your platform
          2. **Windows**: Run the MSI installer (no admin rights required)
          3. **Ubuntu**: Install with `sudo dpkg -i blackblaze-backup-tool_amd64_${{ github.ref_name }}.deb`
          4. Configure your BackBlaze B2 credentials
          5. Select folders to backup
          6. Set up automatic backup schedule

          ### Features
          - Cross-platform GUI (Windows & Ubuntu)
          - Automatic incremental backups
          - System tray integration
          - Scheduled backups (1min, 5min, 15min, hourly, daily, weekly)
          - Secure credential storage
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
