#!/usr/bin/env python3
"""
Automated Error Reporting System for BlackBlaze B2 Backup Tool
This system automatically collects and reports errors to GitHub Issues
"""

import json
import logging
import os
import platform
import sys
import tempfile
from datetime import datetime
from pathlib import Path

import requests


def setup_logging():
    """Setup logging for error reporting"""
    log_dir = Path.home() / ".blackblaze_backup"
    log_dir.mkdir(exist_ok=True)

    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(message)s",
        handlers=[
            logging.FileHandler(log_dir / "error_reporter.log"),
            logging.StreamHandler(),
        ],
    )
    return logging.getLogger(__name__)


def collect_system_info():
    """Collect comprehensive system information"""
    logger = logging.getLogger(__name__)

    try:
        # Get Windows version
        windows_version = platform.platform()

        # Get Python version
        python_version = f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}"

        # Get architecture
        arch = platform.architecture()[0]

        # Get system info
        system_info = {
            "system": platform.system(),
            "release": platform.release(),
            "version": platform.version(),
            "machine": platform.machine(),
            "processor": platform.processor(),
            "architecture": arch,
            "python_version": python_version,
            "windows_version": windows_version,
            "timestamp": datetime.now().isoformat(),
        }

        return system_info
    except Exception as e:
        logger.error(f"Error collecting system info: {e}")
        return {"error": str(e)}


def collect_application_logs():
    """Collect application logs"""
    logger = logging.getLogger(__name__)

    log_file = Path.home() / ".blackblaze_backup" / "blackblaze_backup.log"

    if log_file.exists():
        try:
            with open(log_file, encoding="utf-8") as f:
                # Get last 200 lines
                lines = f.readlines()
                return lines[-200:] if len(lines) > 200 else lines
        except Exception as e:
            logger.error(f"Error reading log file: {e}")
            return [f"Error reading log file: {e}"]
    else:
        return ["Log file not found"]


def collect_error_details():
    """Collect detailed error information"""
    logger = logging.getLogger(__name__)

    try:
        # Check for crash dumps
        crash_dumps = []
        temp_dir = Path(tempfile.gettempdir())

        for dump_file in temp_dir.glob("*blackblaze*"):
            if dump_file.is_file():
                crash_dumps.append(str(dump_file))

        # Check for lock files
        lock_file = temp_dir / "blackblaze_backup_tool_single_instance.lock"
        lock_info = {"exists": lock_file.exists(), "path": str(lock_file)}

        if lock_file.exists():
            try:
                with open(lock_file) as f:
                    lock_info["pid"] = f.read().strip()
            except Exception as e:
                lock_info["error"] = str(e)

        return {
            "crash_dumps": crash_dumps,
            "lock_file": lock_info,
            "temp_directory": str(temp_dir),
        }
    except Exception as e:
        logger.error(f"Error collecting error details: {e}")
        return {"error": str(e)}


def create_github_issue(error_data, github_token=None):
    """Create a GitHub issue with error information"""
    logger = logging.getLogger(__name__)

    if not github_token:
        logger.warning("No GitHub token provided, skipping issue creation")
        return False

    try:
        # Prepare issue data
        issue_title = (
            f"Windows Error Report - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )

        issue_body = f"""## Error Report

**System Information:**
- System: {error_data['system_info'].get('system', 'Unknown')}
- Version: {error_data['system_info'].get('release', 'Unknown')}
- Architecture: {error_data['system_info'].get('architecture', 'Unknown')}
- Python Version: {error_data['system_info'].get('python_version', 'Unknown')}

**Error Details:**
```json
{json.dumps(error_data['error_details'], indent=2)}
```

**Application Logs:**
```
{''.join(error_data['application_logs'][-50:])}
```

**Timestamp:** {error_data['system_info'].get('timestamp', 'Unknown')}

---
*This report was automatically generated by the BlackBlaze B2 Backup Tool error reporting system.*
"""

        # Create GitHub issue
        url = "https://api.github.com/repos/reshdesu/blackblaze2-backup/issues"
        headers = {
            "Authorization": f"token {github_token}",
            "Accept": "application/vnd.github.v3+json",
        }
        data = {
            "title": issue_title,
            "body": issue_body,
            "labels": ["bug", "windows", "auto-reported"],
        }

        response = requests.post(url, headers=headers, json=data)

        if response.status_code == 201:
            issue_url = response.json()["html_url"]
            logger.info(f"GitHub issue created successfully: {issue_url}")
            return True
        else:
            logger.error(
                f"Failed to create GitHub issue: {response.status_code} - {response.text}"
            )
            return False

    except Exception as e:
        logger.error(f"Error creating GitHub issue: {e}")
        return False


def save_error_report(error_data, filename=None):
    """Save error report to file"""
    logger = logging.getLogger(__name__)

    try:
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"error_report_{timestamp}.json"

        report_file = Path.home() / ".blackblaze_backup" / filename

        with open(report_file, "w", encoding="utf-8") as f:
            json.dump(error_data, f, indent=2, ensure_ascii=False)

        logger.info(f"Error report saved to {report_file}")
        return str(report_file)

    except Exception as e:
        logger.error(f"Error saving report: {e}")
        return None


def main():
    """Main error reporting function"""
    logger = setup_logging()
    logger.info("Starting automated error reporting")

    # Collect error data
    error_data = {
        "system_info": collect_system_info(),
        "application_logs": collect_application_logs(),
        "error_details": collect_error_details(),
    }

    # Save error report
    report_file = save_error_report(error_data)

    # Try to create GitHub issue (if token is provided)
    github_token = os.environ.get("GITHUB_TOKEN")
    if github_token:
        create_github_issue(error_data, github_token)
    else:
        logger.info("No GitHub token found, skipping issue creation")

    # Print summary
    logger.info("Error reporting completed")
    logger.info(f"Report saved to: {report_file}")

    return error_data


if __name__ == "__main__":
    error_data = main()
    print(json.dumps(error_data, indent=2))
